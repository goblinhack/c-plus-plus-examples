NOTE-BEGIN
How to use std::function and using
==================================

This example combines two things commonly seen together, std::function and
the new C++11 "using" keyword. The reason they are often seen together is
that creating function types for callbacks has always been notoriously long
winded. std::function and "using" just make things simpler. For example in
the days of C yore we used to have:
```C++
    int callback_wrapper(int (*add_two_numbers_callback)(const int a, const int b) cb, void *userdata);
    callback_wrapper(cb, 1, 2);
```
Not pretty. Splitting it up into a typedef helps a bit:
```C++
    typedef int (*add_two_numbers_callback)(const int a, const int b);
    int callback_wrapper(add_two_numbers_callback cb, void *userdata);
    callback_wrapper(cb, 1, 2);
```
But it's still a bit unintuitive and different syntax from how you would
normally define a function. C++11 makes this simpler and more consistent.
Notice that the "using" keyword has replaced the weird typedef syntax and
looks much cleaner:
```C++
    using add_two_numbers_callback = std::function< int(const int, const int) > sumFunc;
    int callback_wrapper(add_two_numbers_callback cb, void *userdata);
    callback_wrapper(cb, 1, 2);
```
Lambdas can also be supplied identically to such callbacks e.g.:
```C++
    auto add_two_numbers_callback = ([](int a, int b) { return a + b; });
    callback_wrapper(add_two_numbers_callback, 1, 2);
```
Or with inline lambda syntax:
```C++
    callback_wrapper(([](int a, int b) { return a + b; }), 1, 2);
```
Or for clarity or if the return type is in doubt:
```C++
    callback_wrapper(([] (int a, int b) -> int { return a + b; }), 1, 2);
```
Here is the full example:
```C++
NOTE-READ-CODE
```
To build:
<pre>
NOTE-BUILD-CODE
</pre>
NOTE-END
Expected output:
<pre>
NOTE-RUN-CODE
</pre>
NOTE-END
