NOTE-BEGIN
How to use std::map with a custom key
=====================================

std::map provides a key to value mapping, where the key is sorted.
On the back end std::map could be implemented as a tree or hashtable,
but the point is you don't need to worry about that. All you need to
do is provide a means to sort the keys and for that via the < operator.

Now many classes come with this operator already, hence you can do:
```C++
    std::map< std::string, int > m;
    // std::map< std::string, int, std::greater<int>>
```
But if you want to provide your own sorter, that is easy too:
```C++
    bool operator< (const AccountNumber& rhs) const {
        return (val < rhs.val); 
    }
```
For our example, lets make use of "using" to make things more readable:
For adding to a map, you must insert:
```C++
    using Account = BankAccount<int>;
    using Bank = std::map< AccountNumber, Account >;
    Bank thebank;
```
So now we have our key as AccountNumber and Account being our value.
Lets add an account. Note that to make a key value pair you use 
std::make_pair:
```C++
    AccountNumber account1(101);
    Account       balance1(10000);
    thebank.insert(std::make_pair(account1, balance1));
```
Alternatively you can insert via []
```C++
    AccountNumber account2(102);
    Account       balance2(20000);
    thebank[account2] = balance2;
```
And finally, emplace can be used which avoids the copy for large objects:
Alternatively you can insert via []
```C++
    AccountNumber account3(103);
    Account       balance3(30000);
    thebank.emplace(std::make_pair(account3, balance3));
```
To check if an account exists, use find. The return value is an iterator,
so to check for fail just compare to the end() iterator:
```C++
    if (thebank.find(account1) == thebank.end()) {
        DOC("No");
    } else {
        DOC("Yes");
    }
```
Removing an account is via erase:
```C++
    thebank.erase(account2);
```
And finally to remove everything in the map:
```C++
    thebank.clear();
```
Here is the full example:
```C++
NOTE-READ-CODE
```
To build:
<pre>
NOTE-BUILD-CODE
</pre>
NOTE-END
Expected output:
<pre>
NOTE-RUN-CODE
</pre>
NOTE-END
