NOTE-BEGIN
How to use std::sort with a custom container and iterators
==========================================================

(Much of the below was learned from [this link](https://github.com/navyenzo/blIteratorAPI))

Implementing support for algorithms like std::sort is not as simple as might
be imagined. After all, it is C++ :)

For a start, you need to implement your own iterator that can be used to
walk your container. There are 4 types of iterators that we need to support
std::sort

- normal, random access
- constant, random access
- reverse, random access
- reverse constant, random access

Each iterator needs its own implementation, but to avoid this we can use
a templatized iterator e.g.:
```C++
    template<typename T> class MyIterator { ... }
    template<typename T> class MyReverseIterator { ... }
```
And then later we can save some typing by having the const and non const
versions be instantiations of this template e.g.:
```C++
    typedef MyIterator< T >              iterator;
    typedef MyIterator<const T>        const_iterator;
    typedef MyReverseIterator< T >       reverse_iterator;
    typedef MyReverseIterator<const T> const_reverse_iterator;
```
Note that we have one template each for forward and reverse iterators.
The only real difference is that operations like ++ will increment in the
forward container and decrement in the reverse container e.g.:
```C++
    MyIterator< T >        operator++ (int) { auto temp(*this); ++dataptr; return temp; }
    MyReverseIterator< T > operator++ (int) { auto temp(*this); --dataptr; return temp; }
```
We must also provide all operators for moving around the 
container, +,-,++,--,==.!= etc...:
```C++
    MyReverseIterator< T > operator+ (const difference_type& delta) { auto oldptr = dataptr; dataptr-=delta; auto temp(*this); dataptr = oldptr; return temp; }
    MyReverseIterator< T > operator+ (int delta) { auto oldptr = dataptr; dataptr-=delta; auto temp(*this); dataptr = oldptr; return temp; }
    MyReverseIterator< T > operator++ (int) { auto temp(*this); --dataptr; return temp; }
    MyReverseIterator< T > operator- (const difference_type& delta) { auto oldptr = dataptr; dataptr+=delta; auto temp(*this); dataptr = oldptr; return temp; }
    MyReverseIterator< T > operator- (int delta) { auto oldptr = dataptr; dataptr+=delta; auto temp(*this); dataptr = oldptr; return temp; }
    MyReverseIterator< T > operator-- (int) { auto temp(*this); ++dataptr; return temp; }
    MyReverseIterator< T >& operator++ () { --dataptr; return (*this); }
    MyReverseIterator< T >& operator+= (const difference_type& delta) { dataptr -= delta; return (*this); }
    MyReverseIterator< T >& operator-- () { ++dataptr; return (*this); }
    MyReverseIterator< T >& operator-= (const difference_type& delta) { dataptr += delta; return (*this); }
    MyReverseIterator< T >& operator= (T* ptr) { dataptr = ptr; return (*this); }
    MyReverseIterator< T >& operator= (const MyReverseIterator< T >& it) = default;
    T& operator*() { return *dataptr; }
    T* operator->() { return dataptr; }
    bool operator!=(const MyReverseIterator< T >& it) const { return (dataptr != it.get_const_ptr()); }
    bool operator==(const MyReverseIterator< T >& it) const { return (dataptr == it.get_const_ptr()); }
```
One other note, is that the STL will expect the following traits to be 
provided within your iterator:
```C++
template<typename T> class MyIterator {
    ...
    // typedef typename _Iter::difference_type   difference_type;
    // typedef typename _Iter::value_type        value_type;
    // typedef typename _Iter::pointer           pointer;
    // typedef typename _Iter::reference         reference;
    // typedef typename _Iter::iterator_category iterator_category;
    using iterator_category = std::random_access_iterator_tag;
    using difference_type = std::ptrdiff_t;
    using value_type = T;
    using pointer = T*;
    using reference = T&;
```
Now we are able to use MyIterator in our own container. To do so we must
first instantiate the templates e.g.:
```C++
template<typename T> class MyVector {
    ...
    typedef MyIterator< T >              iterator;
    typedef MyIterator<const T>        const_iterator;
    typedef MyReverseIterator< T >       reverse_iterator;
    typedef MyReverseIterator<const T> const_reverse_iterator;
```
And then also provide the normal container traversing functions that we
expect:
```C++
    iterator begin() { return iterator(&dataptr[0]); }
    iterator end() { return iterator(&dataptr[len]); }
    const_iterator cbegin() { return const_iterator(&dataptr[0]); }
    const_iterator cend() { return const_iterator(&dataptr[len]); }
    reverse_iterator rbegin() { return reverse_iterator(&dataptr[len - 1]); }
    reverse_iterator rend() { return reverse_iterator(&dataptr[-1]); }
    const_reverse_iterator crbegin() { return const_reverse_iterator(&dataptr[len - 1]); }
    const_reverse_iterator crend() { return const_reverse_iterator(&dataptr[-1]); }
```
Now, finally, that we have done all that we are able to sort and walk our 
custom container e.g.:
```C++
    std::initializer_list< std::string > init1 = {
        "zaphod",
        "universe",
        "arthur",
        "marvin",
        "mice",
        "vogon"
    };

    MyVector< std::string > vec1(init1);

    std::sort(vec1.begin(), vec1.end(), [](const std::string &a, const std::string &b) {
        return a < b;
    });
```
Here is a full example.
```C++
NOTE-READ-CODE
```
To build:
<pre>
NOTE-BUILD-CODE
</pre>
NOTE-END
Expected output:
<pre>
NOTE-RUN-CODE
</pre>
NOTE-END
