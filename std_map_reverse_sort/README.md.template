NOTE-BEGIN
How to use std::map for reverse sorting
=======================================

std::map provides a key to value mapping, where the key is sorted.
Behind the scenes std::map could be implemented as a tree or hashtable,
but the point is you don't need to worry about that. All you need to
do is provide a means to sort the keys via the "<" operator.

However, for standard provided classes you don't even need to do that e.g.:
```C++
    std::map< std::string, int> m;
```
But what is the sort order? Well it is alphabetically increasing, but you
can be specific and say:
```C++
    std::map< std::string, int, std::less<std::string> > m;
```
Or alternatively for reverse sorting:
```C++
    std::map< std::string, int, std::greater<std::string> > m;

    m["zaphod"] = 1;
    m["universe"] = 2;
    m["arthur"] = 3;
    m["marvin"] = 4;
    m["mice"] = 5;
    m["vogon"] = 6;
```
yields
```C++
    arthur 3
    marvin 4
    mice 5
    universe 2
    vogon 6
    zaphod 1
```
Here is the full example:
```C++
NOTE-READ-CODE
```
To build:
<pre>
NOTE-BUILD-CODE
</pre>
NOTE-END
Expected output:
<pre>
NOTE-RUN-CODE
</pre>
NOTE-END
