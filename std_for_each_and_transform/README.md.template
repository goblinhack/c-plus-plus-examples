NOTE-BEGIN
How to use std::for_each and std::transform
===========================================

std::for_each is used for iterating over containers. You *can* modify
that list as you walk, but if you do, you should perhaps be using
std::transform as that is clearer to the reader what you are doing.

Here is a simple example that std::for_each is well suited for in that
it does not create and side effects while doing the walk.
```C++
        std::list< std::string > l;
        std::for_each(l.begin(), l.end(), [](std::string& s) { std::cout << s << std::endl; });
    }
```
Now you *could* do:
```C++
        std::list< std::string > l;
        std::for_each(l.begin(), l.end(), [](std::string& s) { s += "stuff"; });
    }
```
And all the elements in the list will be modified but it the implication of
for_each is that you would not be doing any modifications, In such a case,
transform is clearer e.g.:
```C++
        std::list< std::string > l;
        std::transform(l.begin(), l.end(), l.begin(), [](std::string& s) { return s + "stuff"; });
    }
```
Note the use of return there. If you want to avoid modifying the original list then you can do:
```C++
        std::list< std::string > o;
        std::list< std::string > n;
        std::transform(o.begin(), o.end(), std::back_inserter(n), [](std::string& s) { return s + "stuff"; });
    }
```
Here is a full example:
```C++
NOTE-READ-CODE
```
To build:
<pre>
NOTE-BUILD-CODE
</pre>
NOTE-END
Expected output:
<pre>
NOTE-RUN-CODE
</pre>
NOTE-END
